# Form implementation generated from reading ui file 'select_PHIMethod_to_process.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt

import json
from config import * 

import xlwt

import arial10

class FitSheetWrapper(object):
    """Try to fit columns to max size of any entry.
    To use, wrap this around a worksheet returned from the 
    workbook's add_sheet method, like follows:

        sheet = FitSheetWrapper(book.add_sheet(sheet_name))

    The worksheet interface remains the same: this is a drop-in wrapper
    for auto-sizing columns.
    """
    def __init__(self, sheet):
        self.sheet = sheet
        self.widths = dict()

    def write(self, r, c, label='', *args, **kwargs):
        self.sheet.write(r, c, label, *args, **kwargs)
        width = arial10.fitwidth(label)
        if width > self.widths.get(c, 0):
            self.widths[c] = round(width)
            self.sheet.col(c).width = round(width)

    def __getattr__(self, attr):
        return getattr(self.sheet, attr)
    
class Ui_ViewPHIScan(object):
               
    def save_data(self):
        filename,_ = QtWidgets.QFileDialog.getSaveFileName(None, 'Save File', '', ".xls(*.xls)")
        wbk = xlwt.Workbook()
        # sheet = wbk.add_sheet("sheet", cell_overwrite_ok=True)
        sheet = FitSheetWrapper(wbk.add_sheet("sheet", cell_overwrite_ok=True))
        style = xlwt.XFStyle()
        font = xlwt.Font()
        font.bold = True
        style.font = font
        model = self.PHIMethodModel

        st = xlwt.easyxf('pattern: pattern solid;')
        st.pattern.pattern_fore_colour = 43  

        for c in range(model.columnCount()):
            text = model.headerData(c, Qt.Orientation.Horizontal)
            sheet.write(0, c+1, text, style=style)

        for r in range(model.rowCount()):
            text = model.headerData(r, Qt.Orientation.Vertical)
            sheet.write(r+1, 0, text, style=style)

        for c in range(model.columnCount()):
            for r in range(model.rowCount()):
                text = model.data(model.index(r, c))
                if len(text) > 200:
                     text = "Text too long to save to a file"
                if c == 3 and text =='1.0' :
                    sheet.write(r+1, c+1, text,st)
                else:
                    sheet.write(r+1, c+1, text)
                     

        wbk.save(filename)


    def setupUi(self, ViewPHIScan,  MainWindow, ): # MainWindow

        #print('start mainwin value', MainWindow.selected_phi_method)
        #print('start phi_cols value',phi_cols)
        
        phi_cols = MainWindow.selected_phi_method
        data_profile = MainWindow.source_profile

        # parsing the data profile result to display
        data_profile_result = {}    
        for source_table in data_profile:
            for tb_item in data_profile[source_table]:
                data_profile_item_result = {}  
                data_profile_col_name = source_table+'.'+tb_item['column_name']
                data_profile_item_result['table'] = source_table
                data_profile_item_result['column'] = tb_item['column_name']
                data_profile_item_result['unique_count'] = tb_item['statistics']['unique_count']
                data_profile_item_result['unique_ratio'] = tb_item['statistics']['unique_ratio']
                if tb_item['categorical'] :
                    categorical_samples = []
                    x = 0
                    for y in tb_item['statistics']['categorical_count'] :
                            categorical_samples.append( str(y)+":"+str(tb_item['statistics']['categorical_count'][y]))
                            x += 1
                            if x >= 5 :
                                break
                    categorical_samples = ' ; '.join(categorical_samples)                         
                    if len(tb_item['statistics']['categorical_count']) > 5 :
                            categorical_samples += '...'
                    data_profile_item_result['Value Counts'] = categorical_samples
                else:     
                     data_profile_item_result['Value Counts'] = "Not available for non categorical items"
                data_profile_result[data_profile_col_name] = data_profile_item_result

        self.PHIMethodModel = QtGui.QStandardItemModel(ViewPHIScan)
        self.PHIMethodModel.removeRows( 0, self.PHIMethodModel.rowCount() )
        # self.PHIMethodModel.itemChanged.connect(self.itemChanged)
        self.PHIMethodModel.setHorizontalHeaderLabels(['Table','Column','Predicted PHI Probability','Predicted Result','Unique Values','Unique Ratio', 'Value Counts'])
        ViewPHIScan.setObjectName("ViewPHIScan")
        ViewPHIScan.resize(500, 520)
        self.centralwidget = QtWidgets.QWidget(ViewPHIScan)
        self.centralwidget.setObjectName("centralwidget")
        self.select_PHIMethods = QtWidgets.QTableView(self.centralwidget)
        self.select_PHIMethods.setModel(self.PHIMethodModel)     
        curr_row = 0
        for table_column in  phi_cols:
                # item_current_table_col = QtGui.QStandardItem(table_column)
                item_current_table = QtGui.QStandardItem(data_profile_result[table_column]['table'])
                item_current_table_col = QtGui.QStandardItem(data_profile_result[table_column]['column'])                
                item_current_probability = QtGui.QStandardItem(str(phi_cols[table_column]['predict_probability']))
                item_current_result = QtGui.QStandardItem(str(phi_cols[table_column]['predict_result']))
                item_current_u_counts =  QtGui.QStandardItem(str(data_profile_result[table_column]['unique_count']))
                item_current_u_ratio = QtGui.QStandardItem(str(data_profile_result[table_column]['unique_ratio']))
                item_current_v_counts =  QtGui.QStandardItem(data_profile_result[table_column]['Value Counts'])         
                if phi_cols[table_column]['predict_result'] == 1:
                    item_current_result.setForeground(QtGui.QColor(255,0,0))
                    item_current_probability.setForeground(QtGui.QColor(255,0,0))
                self.PHIMethodModel.appendRow([item_current_table,item_current_table_col,item_current_probability,item_current_result,item_current_u_counts,item_current_u_ratio,item_current_v_counts])
                curr_row += 1    
        self.select_PHIMethods.setGeometry(QtCore.QRect(20, 60, 900, 450))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.select_PHIMethods.setFont(font)
        self.select_PHIMethods.setObjectName("select_PHIMethods")
        self.select_PHIMethods.resizeColumnsToContents()
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 530, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(ViewPHIScan.close)

        self.pushButton_save = QtWidgets.QPushButton(self.centralwidget,clicked = lambda: self.save_data() )
        self.pushButton_save.setGeometry(QtCore.QRect(200, 530, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_save.setFont(font)
        self.pushButton_save.setObjectName("pushButton_save")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 550, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        ViewPHIScan.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ViewPHIScan)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 397, 26))
        self.menubar.setObjectName("menubar")
        ViewPHIScan.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ViewPHIScan)
        self.statusbar.setObjectName("statusbar")
        ViewPHIScan.setStatusBar(self.statusbar)

        self.retranslateUi(ViewPHIScan)
        QtCore.QMetaObject.connectSlotsByName(ViewPHIScan)

 

    def retranslateUi(self, ViewPHIScan):
        _translate = QtCore.QCoreApplication.translate
        ViewPHIScan.setWindowTitle(_translate("ViewPHIScan", "View PHI Scan Result"))
        self.pushButton.setText(_translate("ViewPHIScan", "Finish"))
        self.pushButton_save.setText(_translate("ViewPHIScan", "Save Result"))
        self.label.setText(_translate("ViewPHIScan", "View PHI Scan Result:  ( Total {} sample records) ".format(str(data_profile_sample_size))))

 
 
# if __name__ == "__main__":
#     import sys

#     phi_cols = {}
#     phi_cols['cptevents'] = []
#     phi_cols['cptevents'].append({"subject_id":"1"})
#     phi_cols['cptevents'].append({"hadm_id":"2"})

#     phi_cols['test'] = []
#     phi_cols['test'].append({"subject_id":"0"})
#     phi_cols['test'].append({"hadm_id":"4"})


#     phi_cols = json.loads(json.dumps(phi_cols,indent= 4 ))


#     app = QtWidgets.QApplication(sys.argv)
#     ViewPHIScan = QtWidgets.QMainWindow()
#     ui = Ui_ViewPHIScan()
#     ui.setupUi(ViewPHIScan,phi_cols = phi_cols)
#     tt = ViewPHIScan.show()
#     print(tt)
#     sys.exit(app.exec())
