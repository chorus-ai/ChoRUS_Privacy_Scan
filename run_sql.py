# Form implementation generated from reading ui file 'run_sql.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


 
from PyQt6 import QtCore, QtGui, QtWidgets
from config import *
import json
from sql_formatter.core import format_sql

import time

from db_tools import *


class Thread(QtCore.QThread):
    log = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super(Thread, self).__init__(parent)
        self._items = []

    def setItems(self, items):
        if not self.isRunning():
            self._items[:] = items

    def run(self):
        for sql_command in self._items:
            time.sleep(1)
            try :
                self.log.emit('processing: %s' % sql_command['target_table'] )

                self.log.emit( '\nReading {} {} '.format (sql_command['source_db'], sql_command['source_table']))
                sql_df = read_source_data (sql_command['source_db'],sql_command['sql_text'])
                # print(sql_df.shape)
                self.log.emit('\nRead {} records  '.format (str(sql_df.shape)))
                
                target_table = '{}_tmp'.format(sql_command['target_table'].lower())
                self.log.emit( '\nWriting  {} {} '.format (sql_command['target_db'], target_table))
                
                write_target(sql_df,sql_command['target_db'], target_table)          
                sql_df = read_target(sql_command['target_db'], target_table)
                self.log.emit('\nWrite {} Success '.format (str(sql_df.shape)))
            except Exception as e:
                self.log.emit('\n SQL Error!' )    
                self.log.emit(str(e) )

class Ui_run_SQL_Form(object):

    source_db=''
    source_tables ={}
    target_tables ={}
    mapped_fields={}
    mapped_tables={}
    target_db=''
    target_db_profile={}
    target_model=''
    gen_sql_texts=[]
    phi_method={}

    MainWindow=''
    sql_plain_text=''
    
    def genereate_SQL(self):

        self.sql_plain_text = '-- EDIT ONLY SQL STATEMENTS\n'

        self.target_db = self.TargetDataSet.currentText()

        with open('{}_profile.json'.format(self.target_db), 'r') as f:
            self.target_db_profile = json.load(f)

        target_mapping_file = target_models[self.target_model]
        with open(target_mapping_file, 'r') as f:
            target_mapping_load = json.load(f)
 
        for x in self.mapped_tables.keys():    
            self.sql_plain_text += '-- Mapped from {} {} to {} {} \n\n'.format (self.source_db,x[1],self.target_db,x[0] )
            target_fields = self.target_db_profile[x[0].lower()]
            fields_text = []
            for fe in target_fields.keys():
                if fe in self.mapped_tables[x].keys():
                    # print( 'mapped', mapped_tables[x][fe])
                    s_table = self.mapped_tables[x][fe].split('.')[0]
                    s_field = self.mapped_tables[x][fe].split('.')[1]
                    if s_table in self.mapped_fields  and s_field in self.mapped_fields[s_table]:
                        s_maps = self.mapped_fields[s_table][s_field]['maps']
                        # print('value mapping exists' , s_maps)
                        case_lines=[]
                        for s_map in s_maps.keys():
                            case_line = " when {} = '{}' then {} ".format( self.mapped_tables[x][fe],s_map,s_maps[s_map].split('_')[0]) 
                            case_lines.append(case_line)
                        case_text  = 'case {}  else null end'.format ( ' '.join(case_lines) )    
                        fields_text.append( '{}::{} as {}'.format( case_text , target_fields[fe]['type'], target_fields[fe]['name']))
                    else:   
                        # if no mapping exists, we need to check whether it is a phi data and need to be processed with special logic 
                        if self.mapped_tables[x][fe] in self.phi_method:
                            if self.phi_method [self.mapped_tables[x][fe]]['method']  == '0':
                                fields_text.append( '{}::{} as {}'.format('null', target_fields[fe]['type'], target_fields[fe]['name']))
                            if self.phi_method [self.mapped_tables[x][fe]]['method']  == '1':
                                fields_text.append( '{}::{} as {}'.format(self.mapped_tables[x][fe], target_fields[fe]['type'], target_fields[fe]['name']))
                            if self.phi_method [self.mapped_tables[x][fe]]['method']  == '2':
                                fields_text.append( '{}.shift({},{})::{} as {}'.format(available_dbs[self.source_db][1],self.mapped_tables[x][fe], self.phi_method [self.mapped_tables[x][fe]]['offset'], target_fields[fe]['type'], target_fields[fe]['name']))
                            if self.phi_method [self.mapped_tables[x][fe]]['method']  == '3':
                                fields_text.append( '{}.mask({})::{} as {}'.format(available_dbs[self.source_db][1],self.mapped_tables[x][fe], target_fields[fe]['type'], target_fields[fe]['name']))
                        else:
                            fields_text.append( '{}::{} as {}'.format(self.mapped_tables[x][fe], target_fields[fe]['type'], target_fields[fe]['name']))
                else:
                    # print ( 'default',target_fields[fe]['type'])
                    fields_text.append( 'null::{} as {}'.format( target_fields[fe]['type'], target_fields[fe]['name']))
            gen_sql_text = {}
            gen_sql_text['source'] = x[1]
            gen_sql_text['target'] = x[0]
            gen_sql_text['sql'] = format_sql( 'select {} from {}.{}'.format(' , '.join(fields_text) ,available_dbs[self.source_db][1], x[1]))                    
            self.gen_sql_texts.append(gen_sql_text)
            self.sql_plain_text += gen_sql_text['sql'] + '\n\n--End of SQL\n\n'
        self.SQL_Text.setPlainText( self.sql_plain_text)    

    def run_sql_process(self):        
        sql_text_updated = self.SQL_Text.toPlainText()
        sql_commands= []
        sql_command ={}
        sql_text = []
        for line in sql_text_updated.split('\n'):
            # print(line)
            if line.startswith('-- Mapped from '):
                mappings = line.split('-- Mapped from')[1] 
                sql_command['source_db'] =mappings.strip().split(' ')[0].strip()
                sql_command['source_table'] =mappings.strip().split(' ')[1].strip()
                sql_command['target_db'] =mappings.strip().split(' ')[3].strip()
                sql_command['target_table'] =mappings.strip().split(' ')[4].strip()
                sql_start = True
            if line.startswith('--End of SQL'):
                sql_command['sql_text'] = '\n'.join(sql_text)
                sql_commands.append(sql_command)
                sql_command ={}
                sql_text = []     
            if not line.startswith('--'):    
                sql_text.append(line)

        self._worker.setItems(sql_commands)
        self._worker.start()                
 
        # logging.warning ( '' )  
        # # print(sql_commands)
        # SQL_logs = 'Running ... '               
        # for sql_command in sql_commands:
        #     logging.warning( '\nReading {} {} '.format (sql_command['source_db'], sql_command['source_table']))
        #     sql_df = read_source_data (sql_command['source_db'],sql_command['sql_text'])
        #     # print(sql_df.shape)
        #     logging.warning ('\nRead {} records  '.format (str(sql_df.shape)))
             
        #     target_table = '{}_tmp'.format(sql_command['target_table'].lower())
        #     logging.warning ( '\nWriting  {} {} '.format (sql_command['target_db'], target_table))
             
        #     write_target(sql_df.head(100),sql_command['target_db'], target_table)          
        #     sql_df = read_target(sql_command['target_db'], target_table)
        #     logging.warning ('\nWrite {} Success '.format (str(sql_df.shape)))
             


    def run_sql(self):    
        if not self._worker.isRunning():
            self.run_sql_process()

    def toLog(self, txt):
        self.SQL_logs.appendPlainText(txt)


    def quit_sql(self,MainWindow):
        MainWindow.generated_SQL = self.SQL_Text.toPlainText()

    def setupUi(self,run_SQL_Form,MainWindow,target_model,source_db,source_tables, target_tables,mappings,init_sql,phi_method):

        self._worker = Thread(run_SQL_Form)
        self._worker.log.connect(self.toLog)
        self._worker.started.connect(lambda: self.toLog('start'))
        self._worker.finished.connect(lambda: self.toLog('finished'))

        self.source_db = source_db
        self.source_tables = source_tables
        self.target_tables = target_tables
        self.target_model = target_model
        self.mapped_fields = process_mapped_fields(mappings)
        self.mapped_tables = process_mapped_tables(mappings)
        self.MainWindow  = MainWindow

        
        # for cur_table in  phi_method:
        #         for cur_table_col in  phi_method[cur_table]:
        #             current_col = list(cur_table_col.keys())[0]
        #             current_method = cur_table_col[current_col]
        #             table_col =  cur_table+'.'+current_col
        #             self.phi_method[table_col] = current_method
        # print(self.phi_method)

        self.phi_method = phi_method
        
        run_SQL_Form.setObjectName("run_SQL_Form")
        run_SQL_Form.resize(1141, 815)
        self.SQL_Text = QtWidgets.QPlainTextEdit(run_SQL_Form)
        self.SQL_Text.setGeometry(QtCore.QRect(60, 180, 941, 341))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.SQL_Text.setFont(font)
        self.SQL_Text.setObjectName("SQL_Text")
        self.SQL_Text.setPlainText(init_sql)

        self.Non_mapped_handle = QtWidgets.QComboBox(run_SQL_Form)
        self.Non_mapped_handle.setGeometry(QtCore.QRect(280, 50, 150, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.Non_mapped_handle.setFont(font)
        self.Non_mapped_handle.setObjectName("Non_mapped_handle")
        self.Non_mapped_handle.addItems(['Import as NULL','Skip Record'])
        self.Non_mapped_handle.setCurrentIndex(0)

        self.label = QtWidgets.QLabel(run_SQL_Form)
        self.label.setGeometry(QtCore.QRect(60, 20, 281, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(run_SQL_Form, clicked = lambda: self.genereate_SQL())
        self.pushButton.setGeometry(QtCore.QRect(60, 140, 141, 28))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(run_SQL_Form)
        self.label_3.setGeometry(QtCore.QRect(60, 60, 281, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.pushButton_2 = QtWidgets.QPushButton(run_SQL_Form,clicked = lambda: self.run_sql())
        self.pushButton_2.setGeometry(QtCore.QRect(60, 540, 141, 28))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.TargetDataSet = QtWidgets.QComboBox(run_SQL_Form)
        self.TargetDataSet.setGeometry(QtCore.QRect(800, 120, 201, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.TargetDataSet.setFont(font)
        self.TargetDataSet.setObjectName("TargetDataSet")
        self.TargetDataSet.addItems(target_dbs.keys())
        self.label_2 = QtWidgets.QLabel(run_SQL_Form)
        self.label_2.setGeometry(QtCore.QRect(640, 120, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        #self.SQL_logs = QTextEditLogger (run_SQL_Form)
        self.SQL_logs = QtWidgets.QPlainTextEdit(run_SQL_Form)
        self.SQL_logs.setGeometry(QtCore.QRect(60, 600, 941, 161))
        # logging.getLogger().addHandler(self.SQL_logs)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.SQL_logs.setFont(font)
        # self.SQL_logs.setObjectName("SQL_logs")

        self.pushButton_3 = QtWidgets.QPushButton(run_SQL_Form,clicked = lambda: self.quit_sql(MainWindow))
        self.pushButton_3.clicked.connect(run_SQL_Form.close)
        self.pushButton_3.setGeometry(QtCore.QRect(60, 800, 141, 28))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")

        self.retranslateUi(run_SQL_Form)
        QtCore.QMetaObject.connectSlotsByName(run_SQL_Form)

    def retranslateUi(self, run_SQL_Form):
        _translate = QtCore.QCoreApplication.translate
        run_SQL_Form.setWindowTitle(_translate("run_SQL_Form", "Form"))
        self.label.setText(_translate("run_SQL_Form", "SQL Generation Options"))
        self.pushButton.setText(_translate("run_SQL_Form", "Generate SQL"))
        self.label_3.setText(_translate("run_SQL_Form", "Unmapped Field Values"))
        self.pushButton_2.setText(_translate("run_SQL_Form", "Execute SQL"))
        self.label_2.setText(_translate("run_SQL_Form", "Target Database"))
        self.pushButton_3.setText(_translate("run_SQL_Form", "Close"))

if __name__ == "__main__":


    with open('selected_mappings.json', 'r') as f:
        selected_mappings = json.load(f)['mapped_items']   

    with open('mapping_profile.json', 'r') as f:
        source_mapping = json.load(f)   

    with open('mapping_profile_target.json', 'r') as f:
        target_mapping = json.load(f)   

    import sys
    app = QtWidgets.QApplication(sys.argv)
    run_SQL_Form = QtWidgets.QWidget()
    ui = Ui_run_SQL_Form()
    ui.setupUi(run_SQL_Form,MainWindow=app, target_model ='CDMV5.4', source_db = 'PSQL_MIMIC',source_tables = source_mapping, target_tables = target_mapping,mappings = selected_mappings)
    run_SQL_Form.show()
    sys.exit(app.exec())
